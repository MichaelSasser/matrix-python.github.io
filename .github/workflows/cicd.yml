# MIT License
#
# Copyright (c) 2022 Michael Sasser <Info@MichaelSasser.org>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

---
name: CICD

on:
  push:
    branches:
      - master

  pull_request:

  # Update the number of users, and the user list, using Matrix API, every day
  schedule:
    - cron: "0 5 * * *"

env:
  NODE_VERSION: "16"  # Must be of type str

jobs:

  # Install the dependencies and cache them for the other jobs
  install-dependencies:
    runs-on: "ubuntu-20.04"
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: "${{ env.NODE_VERSION }}"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Cache node_modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ./node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

  # Lint scripts (js)
  lint-scripts:
    runs-on: "ubuntu-20.04"
    needs: [install-dependencies]
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: "${{ env.NODE_VERSION }}"
          cache: "npm"

      - name: Cache node_modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ./node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Lint Scripts
        run: npm run lint:scripts

  # Lint Styles (Sass/CSS)
  lint-styles:
    runs-on: "ubuntu-20.04"
    needs: [install-dependencies]
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: "${{ env.NODE_VERSION }}"
          cache: "npm"

      - name: Cache node_modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ./node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Lint Styles
        run: npm run lint:styles

  # Lint markdown
  lint-markdown:
    runs-on: "ubuntu-20.04"
    needs: [install-dependencies]
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: "${{ env.NODE_VERSION }}"
          cache: "npm"

      - name: Cache node_modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ./node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Lint Markdown
        run: npm run lint:markdown

  # Run a test build (development environment)
  test:
    runs-on: "ubuntu-20.04"
    needs: [install-dependencies]
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true

      - name: Checkout LFS objects
        run: git lfs checkout

      - uses: actions/setup-node@v3
        with:
          node-version: "${{ env.NODE_VERSION }}"
          cache: "npm"

      - name: Cache node_modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ./node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Run a build test
        run: npm run test-build

  # Check if the data artifact already exists
  check-artifact:
    outputs:
      status: ${{ steps.data-check.outcome }}
    runs-on: "ubuntu-20.04"
    if: |
      github.repository == 'matrix-python/matrix-python.github.io' &&
      github.ref == 'refs/heads/master'
    steps:

      - id: data-check
        name: Check if data artifact exists
        continue-on-error: true
        uses: actions/download-artifact@v3
        with:
          name: website-data

  # Get data from Matrix API, if the data artifact does not exist
  get-data:
    runs-on: "ubuntu-20.04"
    needs: [check-artifact]
    if: |
      github.repository == 'matrix-python/matrix-python.github.io' &&
      github.ref == 'refs/heads/master' &&
      needs.check-artifact.outputs.status != 'success'

    steps:
      - name: Ensure data directory exists
        run: mkdir -p data

      - name: GET user list from Matrix API
        run: ./utils/get_matrix_users 'matrix.org' "${{ secrets.MATRIX_SESSION_TOKEN }}"

      - name: Upload data artifact
        uses: actions/upload-artifact@v3
        with:
          name: webiste-data
          path: data/
          if-no-files-found: error
          retention-days: 1


  # Build and Deploy the website to gh-pages (production environment)
  deploy:
    runs-on: "ubuntu-20.04"
    if: |
      github.repository == 'matrix-python/matrix-python.github.io' &&
      github.ref == 'refs/heads/master'
    needs:
      - install-dependencies
      - test
      - lint-scripts
      - lint-styles
      - lint-markdown
      - get-data
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
      - uses: actions/checkout@v3
        with:
          lfs: true

      - name: Checkout LFS objects
        run: git lfs checkout

      - uses: actions/setup-node@v3
        with:
          node-version: "${{ env.NODE_VERSION }}"
          cache: "npm"

      - name: Cache node_modules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: |
            ./node_modules
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Download data artifact
        uses: actions/download-artifact@v3
        with:
          name: website-data

      - name: Build production website
        run: npm run build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./public
